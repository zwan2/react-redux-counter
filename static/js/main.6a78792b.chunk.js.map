{"version":3,"sources":["components/Counter.js","containers/CounterContainer.js","actions/index.js","actions/ActionTypes.js","utils/index.js","containers/App.js","serviceWorker.js","reducers/number.js","reducers/color.js","reducers/index.js","index.js"],"names":["Counter","_ref","number","color","onIncrement","onDecrement","onSetColor","react_default","a","createElement","className","onClick","onContextMenu","e","preventDefault","onDoubleClick","style","backgroundColor","defaultProps","console","warn","CounterContainer","connect","state","colorData","numberData","dispatch","type","Math","floor","random","actions","App","containers_CounterContainer","Component","Boolean","window","location","hostname","match","initialState","arguments","length","undefined","action","reducers","combineReducers","store","createStore","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAKMA,SAAU,SAAAC,GAA6D,IAA1DC,EAA0DD,EAA1DC,OAAQC,EAAkDF,EAAlDE,MAAOC,EAA2CH,EAA3CG,YAAaC,EAA8BJ,EAA9BI,YAAaC,EAAiBL,EAAjBK,WACxD,OACIC,EAAAC,EAAAC,cAAA,OACIC,UAAU,UACVC,QAASP,EACTQ,cACI,SAACC,GACGA,EAAEC,iBACFT,KAGRU,cAAeT,EACfU,MAAO,CAAEC,gBAAiBd,IACzBD,KAcbF,EAAQkB,aAAe,CACnBhB,OAAQ,EACRC,MAAO,QACPC,YAAa,kBAAMe,QAAQC,KAAK,4BAChCf,YAAa,kBAAMc,QAAQC,KAAK,4BAChCd,WAAY,kBAAMa,QAAQC,KAAK,4BAGpBpB,eClCf,IAqBeqB,EALUC,YAhBD,SAACC,GAAD,MAAY,CAChCpB,MAAOoB,EAAMC,UAAUrB,MACvBD,OAAQqB,EAAME,WAAWvB,SAIF,SAACwB,GAAD,MAAe,CACtCtB,YAAa,kBAAMsB,ECTS,CAC5BC,KCHqB,eFYrBtB,YAAa,kBAAMqB,ECNS,CAC5BC,KCNqB,eFYrBrB,WAAY,WACR,IAAMH,EGfK,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAIWyB,KAAKC,MAAsB,GAAhBD,KAAKE,WHD3BJ,ECLgB,SAACvB,GAAD,MAAY,CAChCwB,KCTqB,YDUrBxB,SDGa4B,CAAiB5B,OAKTmB,CAGvBtB,GIbagC,mLANP,OACIzB,EAAAC,EAAAC,cAACwB,EAAD,aAHMC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEChBAC,EAAe,CACjBtC,OAAQ,GAkBGA,EAfA,WAAkC,IAAjCqB,EAAiCkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBD,EACpB,QAD6CC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC9BhB,MACX,IJNiB,YIOb,MAAO,CACHzB,OAAQqB,EAAMrB,OAAS,GAE/B,IJTiB,YIUb,MAAO,CACHA,OAAQqB,EAAMrB,OAAS,GAE/B,QACI,OAAOqB,ICfbiB,EAAe,CACjBrC,MAAO,SAcIA,EAXD,WAAkC,IAAjCoB,EAAiCkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBD,EAAcI,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOjB,MACX,ILJiB,YKKb,MAAO,CACHxB,MAAOyC,EAAOzC,OAEtB,QACI,OAAOoB,ICHJsB,EALEC,YAAgB,CAC7BrB,WAAYvB,EACZsB,UAAWrB,ICKT4C,EAAQC,YAAYH,GAG1BI,IAASC,OACL3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUJ,MAAOA,GACbxC,EAAAC,EAAAC,cAAC2C,EAAD,OAEJC,SAASC,eAAe,SJ8GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a78792b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Counter.css';\r\n\r\n//Presentational: 함수형\r\nconst Counter = ({ number, color, onIncrement, onDecrement, onSetColor }) => {\r\n    return (\r\n        <div\r\n            className=\"Counter\"\r\n            onClick={onIncrement}\r\n            onContextMenu={\r\n                (e) => {\r\n                    e.preventDefault();\r\n                    onDecrement();\r\n                }\r\n            }\r\n            onDoubleClick={onSetColor}\r\n            style={{ backgroundColor: color }}>\r\n            {number}\r\n        </div>\r\n    );\r\n};\r\n\r\n//자료형을 지정 (대소문자 주의)\r\nCounter.propTypes = {\r\n    number: PropTypes.number,\r\n    color: PropTypes.string,\r\n    onIncrement: PropTypes.func,\r\n    onDecrement: PropTypes.func,\r\n    onSetColor: PropTypes.func\r\n};\r\n\r\nCounter.defaultProps = {\r\n    number: 0,\r\n    color: 'black',\r\n    onIncrement: () => console.warn('onIncrement not defined'),\r\n    onDecrement: () => console.warn('onDecrement not defined'),\r\n    onSetColor: () => console.warn('onSetColor not defined')\r\n};\r\n\r\nexport default Counter;","import Counter from '../components/Counter';\r\nimport * as actions from '../actions';\r\nimport { connect } from \"react-redux\";\r\nimport { getRandomColor } from '../utils';\r\n\r\n//State - Props\r\nconst mapStateToProps = (state) => ({\r\n    color: state.colorData.color,\r\n    number: state.numberData.number\r\n});\r\n\r\n//Action - Props\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onIncrement: () => dispatch(actions.increment()),\r\n    onDecrement: () => dispatch(actions.decrement()),\r\n    onSetColor: () => {\r\n        const color = getRandomColor();\r\n        dispatch(actions.setColor(color));\r\n    }\r\n})\r\n\r\n//Counter (Component) - App\r\nconst CounterContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Counter);\r\n\r\nexport default CounterContainer;","//액션 생성자\r\n\r\nimport * as types from './ActionTypes';\r\n\r\nexport const increment = () => ({\r\n    type: types.INCREMENT\r\n});\r\n\r\nexport const decrement = () => ({\r\n    type: types.DECREMENT\r\n});\r\n\r\nexport const setColor = (color) => ({\r\n    type: types.SET_COLOR,\r\n    color\r\n})","//Action의 종류 선언 (대문자)\r\n\r\nexport const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const SET_COLOR = 'SET_COLOR';\r\n\r\n","export function getRandomColor() {\r\n    const colors = [\r\n        '#495057',\r\n        '#f03e3e',\r\n        '#d6336c',\r\n        '#ae3ec9',\r\n        '#7048e8',\r\n        '#4263eb',\r\n        '#1c7cd6',\r\n        '#1098ad',\r\n        '#0ca678',\r\n        '#37b24d',\r\n        '#74b816',\r\n        '#f59f00',\r\n        '#f76707'\r\n    ];\r\n\r\n    // 0 부터 12까지 랜덤 숫자\r\n    const random = Math.floor(Math.random() * 13);\r\n\r\n    // 랜덤 색상 반환\r\n    return colors[random];\r\n}","import React, { Component } from 'react';\r\n\r\nimport CounterContainer from './CounterContainer';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <CounterContainer />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    number: 0\r\n};\r\n\r\nconst number = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.INCREMENT:\r\n            return {\r\n                number: state.number + 1\r\n            };\r\n        case types.DECREMENT:\r\n            return {\r\n                number: state.number - 1\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default number;","import * as types from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    color: 'black'\r\n};\r\n\r\nconst color = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SET_COLOR:\r\n            return {\r\n                color: action.color\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default color;","import number from './number';\r\nimport color from './color';\r\nimport { combineReducers} from \"redux\";\r\n\r\n//서브 리듀서를 합쳐줌\r\nconst reducers = combineReducers({\r\n    numberData: number,\r\n    colorData: color\r\n});\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Redux 불러오기\nimport { createStore } from 'redux';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\n//스토어 생성\nconst store = createStore(reducers);\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}